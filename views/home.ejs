<%- include("partials/header") -%>

<header class="pb-3 mb-4 border-bottom">
  <a
    href="/"
    class="d-flex align-items-center text-body-emphasis text-decoration-none"
  >
    <span class="fs-4" style="color: #adb5bd"
      >Made with ‚ù§Ô∏è from Mohammed Taha</span
    >
  </a>
</header>

<script>
  window.addEventListener('DOMContentLoaded', function() {
    function modifyClasses() {
      var isPhone = window.matchMedia('(max-width: 576px)').matches;

      if (isPhone) {
        document.querySelector('.p-5').classList.add('p-4');
        document.querySelector('.p-5').classList.remove('p-5');
        document.querySelector('.mb-4').classList.add('mb-3');
        document.querySelector('.mb-4').classList.remove('mb-4');
        document.querySelector('.container-fluid').classList.add('py-3');
        document.querySelector('.container-fluid').classList.remove('py-5');

      }
    }

    // Call the function initially
    modifyClasses();

    // Add event listener for window resize
    window.addEventListener('resize', modifyClasses);
  });
</script>


<style>
  body {
    position: relative;
    width: 100%;
    height: 100vh;
  }

  .overlay {
    display: flex;
    justify-content: center;
    align-items: center;
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.5);
    z-index: 9999;
    backdrop-filter: blur(5px);
  }

  .alert {
    position: relative;
    padding: 20px;
    background-color: #f8d7da;
    color: #721c24;
    border: 1px solid #f5c6cb;
    border-radius: 4px;
    max-width: 90%;
    width: 400px;
    text-align: center;
    backdrop-filter: none;
  }

  .btn {
    margin-top: 10px;
  }
</style>

<div class="overlay">
  <div class="alert" id="alertDiv">
    <br>
    ‚ù§Ô∏è Welcome ‚ù§Ô∏è
    <br>
    <br>
    Optimal experience: Please use a laptop or PC for coding experiments as the site is not optimized for phone screens. Remember, coding on a phone is like trying to fit an elephant into a phone booth‚Äîit's just not a good fit! Thank you!
    <br>
    <button type="button" class="btn btn-primary" id="hideAlertBtn">OK</button>
  </div>
</div>
<script>
  window.addEventListener('DOMContentLoaded', function() {
    var overlay = document.querySelector('.overlay');
    var alertDiv = document.getElementById('alertDiv');
    var hideAlertBtn = document.getElementById('hideAlertBtn');

    overlay.style.display = 'flex';
    alertDiv.style.display = 'block';

    hideAlertBtn.addEventListener('click', function() {
      overlay.style.display = 'none';
    });
  });
</script>



<div class="p-5 mb-4 rounded-3" style="background-color: #2b3035; box-shadow: rgba(240, 46, 170, 0.4) 0px 14px 28px, rgba(240, 46, 170, 0.3) 0px 10px 10px;">
  <div class="container-fluid py-4">
    <h1 aria-label="Data Structures Experiments" class="display-5 fw-bold">
      Data Structures<br><span class="typewriter"></span>
      <style>
        h1 {
          font-size: 9vmin;
          /* color: #8bf; */
          /* text-align: left; */
          /* font-family: Lato, sans-serif; */
          /* font-weight: 700; */
          margin-bottom: 2rem;
        }

        /* Typewriter effect 1 */
        @keyframes typing {
          0.0000%,
          27.3488% {
            content: "";
          }
          1.1395%,
          26.2093% {
            content: "E";
          }
          2.2791%,
          25.0698% {
            content: "Ex";
          }
          3.4186%,
          23.9302% {
            content: "Exp";
          }
          4.5581%,
          22.7907% {
            content: "Expe";
          }
          5.6977%,
          21.6512% {
            content: "Exper";
          }
          6.8372%,
          20.5116% {
            content: "Experi";
          }
          7.9767%,
          19.3721% {
            content: "Experim";
          }
          9.1163%,
          18.2326% {
            content: "Experime";
          }
          10.2558%,
          17.0930% {
            content: "Experimen";
          }
          11.3953%,
          15.9535% {
            content: "Experiments";
          }

          30.7674%,
          51.2791% {
            content: "";
          }
          31.9070%,
          50.1395% {
            content: "I";
          }
          33.0465%,
          49.0000% {
            content: "In";
          }
          34.1860%,
          47.8605% {
            content: "In P";
          }
          35.3256%,
          46.7209% {
            content: "In Py";
          }
          36.4651%,
          45.5814% {
            content: "In Pyt";
          }
          37.6047%,
          44.4419% {
            content: "In Pyth";
          }
          38.6977%,
          43.2093% {
            content: "In Pytho";
          }
          39.8372%,
          42.0698% {
            content: "In Python";
          }
        }

        @keyframes blink {
          0%,
          100% {
            opacity: 1;
          }
          50% {
            opacity: 0;
          }
        }

        .typewriter {
          --caret: currentcolor;
        }

        .typewriter::before {
          content: "";
          animation: typing 8.2s infinite;
        }

        .typewriter::after {
          content: "";
          border-right: 1px solid var(--caret);
          animation: blink 0.5s linear infinite;
        }

        .typewriter.thick::after {
          border-right: 1ch solid var(--caret);
        }

        .typewriter.nocaret::after {
          border-right: 0;
        }

        @media (prefers-reduced-motion) {
          .typewriter::after {
            animation: none;
          }
        }

        /**/
      </style>
    </h1>
    <br>
    <p class=" fs-4">
      I have simplified some of the Experiments, not all. So have a look and I
      have explained each experiment and there are some links provided for each
      experiment, make sure to visit them. I hope this helps you üòä.
    </p>
    <br>
    <button class="btn btn-primary btn-lg" type="button">
      Good Luck Everyone üòú
    </button>
  </div>
</div>

<br>
<br>
<br>
<br>
<br>
<br>
<style>
  /* body{
    position: relative;
  width: 100%;
  height: 100vh;
  overflow: hidden;
  filter: blur(5px);
  } */
</style>

<div class="row align-items-md-stretch">
  <div class="col-md-6 mb-4">
    <div
      class="h-100 p-5 text-bg-dark border rounded-3"
      style="
        box-shadow: rgba(240, 46, 170, 0.4) -5px 5px,
          rgba(240, 46, 170, 0.3) -10px 10px, rgba(240, 46, 170, 0.2) -15px 15px,
          rgba(240, 46, 170, 0.1) -20px 20px,
          rgba(240, 46, 170, 0.05) -25px 25px;
      "
    >
      <h2>Experiment 01 A</h2>
      <p>
        This code is a collection of four programs: one that performs mathematical operations, one that manipulates strings, one that manipulates lists, and one that manipulates dictionaries. The programs demonstrate various operations such as addition, subtraction, multiplication, division, printing, appending, popping, deleting, and modifying elements in a list and dictionary.
      </p>
      <form action="/" method="post">
        <button
          class="btn btn-outline-primary"
          value="experiment-01-a"
          name="button"
          type="submit"
        >
          Example button
        </button>
      </form>
    </div>
  </div>
  <div class="col-md-6 mb-4">
    <div
      class="h-100 p-5 text-bg-dark border rounded-3"
      style="
        box-shadow: rgba(240, 46, 170, 0.4) -5px 5px,
          rgba(240, 46, 170, 0.3) -10px 10px, rgba(240, 46, 170, 0.2) -15px 15px,
          rgba(240, 46, 170, 0.1) -20px 20px,
          rgba(240, 46, 170, 0.05) -25px 25px;
      "
    >
      <h2>Experiment 01 B</h2>
      <p>
        This code demonstrates a basic implementation of a stack data structure using Python. A stack follows the last-in, first-out (LIFO) principle, where elements are added and removed from the top of the stack.
      </p>
      <form action="/" method="post">
        <button
          class="btn btn-outline-primary"
          value="experiment-01-b"
          name="button"
          type="submit"
        >
          Example button
        </button>
      </form>
    </div>
  </div>
</div>
<br />
<br />
<div class="row align-items-md-stretch">
  <div class="col-md-6 mb-4">
    <div
      class="h-100 p-5 text-bg-dark border rounded-3"
      style="box-shadow: rgba(240, 46, 170, 0.4) 0px 5px 25px"
    >
      <h2>Experiment 02</h2>
      <p>
        checkPair and countFreq. The checkPair function checks an array for a pair of elements that add up to a given target sum. If a valid pair is found, it is displayed as output. The countFreq function counts the frequency of each element in an array and prints the element along with its count.
      </p>
      <form action="/" method="post">
        <button
          class="btn btn-outline-primary"
          value="experiment-02"
          name="button"
          type="submit"
        >
          Example button
        </button>
      </form>
    </div>
  </div>
</div>
<br />
<br />
<div class="row align-items-md-stretch">
  <div class="col-md-6 mb-4">
    <div
      class="h-100 p-5 text-bg-dark border rounded-3"
      style="
        box-shadow: rgba(240, 46, 170, 0.4) -5px 5px,
          rgba(240, 46, 170, 0.3) -10px 10px, rgba(240, 46, 170, 0.2) -15px 15px,
          rgba(240, 46, 170, 0.1) -20px 20px,
          rgba(240, 46, 170, 0.05) -25px 25px;
      "
    >
      <h2>Experiment 03 A</h2>
      <p>
        The provided code performs a linear search on arrays of increasing lengths and measures the time it takes to complete the search. It then plots the time complexity results, showing how the search time increases linearly with the size of the input array.
      </p>
      <form action="/" method="post">
        <button
          class="btn btn-outline-primary"
          value="experiment-03-a"
          name="button"
          type="submit"
        >
          Example button
        </button>
      </form>
    </div>
  </div>
  <div class="col-md-6 mb-4">
    <div
      class="h-100 p-5 text-bg-dark border rounded-3"
      style="
        box-shadow: rgba(240, 46, 170, 0.4) -5px 5px,
          rgba(240, 46, 170, 0.3) -10px 10px, rgba(240, 46, 170, 0.2) -15px 15px,
          rgba(240, 46, 170, 0.1) -20px 20px,
          rgba(240, 46, 170, 0.05) -25px 25px;
      "
    >
      <h2>Experiment 03 B</h2>
      <p>
        This code implements three sorting algorithms: selection sort, bubble sort, and insertion sort. It measures the time taken by each algorithm to sort arrays of different lengths and plots the time complexity graph. The code provides a visual comparison of the sorting algorithms based on their performance.
      </p>
      <form action="/" method="post">
        <button
          class="btn btn-outline-primary"
          value="experiment-03-b"
          name="button"
          type="submit"
        >
          Example button
        </button>
      </form>
    </div>
  </div>
</div>
<br />
<div class="row align-items-md-stretch">
  <div class="col-md-6 mb-4">
    <div
      class="h-100 p-5 text-bg-dark border rounded-3"
      style="
        box-shadow: rgba(240, 46, 170, 0.4) -5px 5px,
          rgba(240, 46, 170, 0.3) -10px 10px, rgba(240, 46, 170, 0.2) -15px 15px,
          rgba(240, 46, 170, 0.1) -20px 20px,
          rgba(240, 46, 170, 0.05) -25px 25px;
      "
    >
      <h2>Experiment 04 A</h2>
      <p>
        The given code implements the binary search algorithm. It defines a binarySearch function that takes an array, target element, start index (si), and end index (ei) as parameters. The function recursively performs binary search on the array to find the target element. It compares the target element with the middle element of the current range and narrows down the search range accordingly until the target element is found or the search range is empty.
      </p>
      <form action="/" method="post">
        <button
          class="btn btn-outline-primary"
          value="experiment-04-a"
          name="button"
          type="submit"
        >
          Example button
        </button>
      </form>
    </div>
  </div>
  <div class="col-md-6 mb-4">
    <div
      class="h-100 p-5 text-bg-dark border rounded-3"
      style="
        box-shadow: rgba(240, 46, 170, 0.4) -5px 5px,
          rgba(240, 46, 170, 0.3) -10px 10px, rgba(240, 46, 170, 0.2) -15px 15px,
          rgba(240, 46, 170, 0.1) -20px 20px,
          rgba(240, 46, 170, 0.05) -25px 25px;
      "
    >
      <h2>Experiment 04 B</h2>
      <p>
        Quick Sort: Efficient divide-and-conquer algorithm with O(n log n) average and worst-case time complexity for sorting large datasets.
    Merge Sort: Effective divide-and-conquer algorithm with O(n log n) average and worst-case time complexity for sorting large datasets by recursively dividing, sorting, and merging sublists.
      </p>
      <form action="/" method="post">
        <button
          class="btn btn-outline-primary"
          value="experiment-04-b"
          name="button"
          type="submit"
        >
          Example button
        </button>
      </form>
    </div>
  </div>
  <div class="col-md-6 mb-4">
    <div
      class="h-100 p-5 text-bg-dark border rounded-3"
      style="
        box-shadow: rgba(240, 46, 170, 0.4) -5px 5px,
          rgba(240, 46, 170, 0.3) -10px 10px, rgba(240, 46, 170, 0.2) -15px 15px,
          rgba(240, 46, 170, 0.1) -20px 20px,
          rgba(240, 46, 170, 0.05) -25px 25px;
      "
    >
      <h2>Experiment 04 C</h2>
      <p>
        The code calculates the Fibonacci sequence up to a given number `n` and returns the sequence as a list. It uses a `for` loop to generate the Fibonacci numbers and appends them to a list. The function is then called with different values of `n` to print the corresponding Fibonacci sequences.
      </p>
      <form action="/" method="post">
        <button
          class="btn btn-outline-primary"
          value="experiment-04-c"
          name="button"
          type="submit"
        >
          Example button
        </button>
      </form>
    </div>
  </div>
</div>
<br />
<br />
<div class="row align-items-md-stretch">
  <div class="col-md-6 mb-4">
    <div
      class="h-100 p-5 text-bg-dark border rounded-3"
      style="box-shadow: rgba(240, 46, 170, 0.4) 0px 5px 25px"
    >
      <h2>Experiment 05</h2>
      <p>
        The provided code implements a linked list data structure in Python with functions for printing, searching, prepending, and removing nodes. It demonstrates basic operations on a linked list such as traversal, modification, and manipulation of nodes.
      </p>
      <form action="/" method="post">
        <button
          class="btn btn-outline-primary"
          value="experiment-05"
          name="button"
          type="submit"
        >
          Example button
        </button>
      </form>
    </div>
  </div>
</div>
<br />
<br />
<div class="row align-items-md-stretch">
  <div class="col-md-6 mb-4">
    <div
      class="h-100 p-5 text-bg-dark border rounded-3"
      style="box-shadow: rgba(240, 46, 170, 0.4) 0px 5px 25px"
    >
      <h2>Experiment 06</h2>
      <p>
        The provided code defines an iterable class that generates a sequence of numbers from 10 up to a specified limit using the `__iter__` and `__next__` methods. It demonstrates the implementation of a custom iterator in Python.
      </p>
      <form action="/" method="post">
        <button
          class="btn btn-outline-primary"
          value="experiment-06"
          name="button"
          type="submit"
        >
          Example button
        </button>
      </form>
    </div>
  </div>
</div>
<br />
<br />
<div class="row align-items-md-stretch">
  <div class="col-md-6 mb-4">
    <div
      class="h-100 p-5 text-bg-dark border rounded-3"
      style="
        box-shadow: rgba(240, 46, 170, 0.4) -5px 5px,
          rgba(240, 46, 170, 0.3) -10px 10px, rgba(240, 46, 170, 0.2) -15px 15px,
          rgba(240, 46, 170, 0.1) -20px 20px,
          rgba(240, 46, 170, 0.05) -25px 25px;
      "
    >
      <h2>Experiment 07 A</h2>
      <p>
        The provided code implements a doubly linked list data structure in Python with various operations such as pushing elements to the front, appending elements at the end, and inserting elements after a given node. It also includes a method to print the elements of the linked list in both forward and reverse directions. The code demonstrates the usage of the doubly linked list by creating an instance of the class, performing several operations on it, and then printing the resulting linked list.
      </p>
      <form action="/" method="post">
        <button
          class="btn btn-outline-primary"
          value="experiment-07-a"
          name="button"
          type="submit"
        >
          Example button
        </button>
      </form>
    </div>
  </div>
  <div class="col-md-6 mb-4">
    <div
      class="h-100 p-5 text-bg-dark border rounded-3"
      style="
        box-shadow: rgba(240, 46, 170, 0.4) -5px 5px,
          rgba(240, 46, 170, 0.3) -10px 10px, rgba(240, 46, 170, 0.2) -15px 15px,
          rgba(240, 46, 170, 0.1) -20px 20px,
          rgba(240, 46, 170, 0.05) -25px 25px;
      "
    >
      <h2>Experiment 07 B</h2>
      <p>
        This code implements a Circular Doubly Linked List data structure in Python, allowing for the creation, insertion, deletion, searching, and display of nodes.
      </p>
      <form action="/" method="post">
        <button
          class="btn btn-outline-primary"
          value="experiment-07-b"
          name="button"
          type="submit"
        >
          Example button
        </button>
      </form>
    </div>
  </div>
</div>
<br />
<div class="row align-items-md-stretch">
  <div class="col-md-6 mb-4">
    <div
      class="h-100 p-5 text-bg-dark border rounded-3"
      style="
        box-shadow: rgba(240, 46, 170, 0.4) -5px 5px,
          rgba(240, 46, 170, 0.3) -10px 10px, rgba(240, 46, 170, 0.2) -15px 15px,
          rgba(240, 46, 170, 0.1) -20px 20px,
          rgba(240, 46, 170, 0.05) -25px 25px;
      "
    >
      <h2>Experiment 08 A</h2>
      <p>
        The given code implements a Stack data structure using a list. It provides methods to check if the stack is empty, add items to the stack, remove items from the stack, and display the contents of the stack. The code allows users to interactively perform stack operations such as adding students, displaying the stack, removing students, and exiting the program.
      </p>
      <form action="/" method="post">
        <button
          class="btn btn-outline-primary"
          value="experiment-08-a"
          name="button"
          type="submit"
        >
          Example button
        </button>
      </form>
    </div>
  </div>
  <div class="col-md-6 mb-4">
    <div
      class="h-100 p-5 text-bg-dark border rounded-3"
      style="
        box-shadow: rgba(240, 46, 170, 0.4) -5px 5px,
          rgba(240, 46, 170, 0.3) -10px 10px, rgba(240, 46, 170, 0.2) -15px 15px,
          rgba(240, 46, 170, 0.1) -20px 20px,
          rgba(240, 46, 170, 0.05) -25px 25px;
      "
    >
      <h2>Experiment 08 B</h2>
      <p>
        The checkBalance function uses a stack-based approach to check if an expression containing parentheses, curly braces, and square brackets is balanced, returning True if it is and False otherwise.
      </p>
      <form action="/" method="post">
        <button
          class="btn btn-outline-primary"
          value="experiment-08-b"
          name="button"
          type="submit"
        >
          Example button
        </button>
      </form>
    </div>
  </div>
</div>
<br />
<div class="row align-items-md-stretch">
  <div class="col-md-6 mb-4">
    <div
      class="h-100 p-5 text-bg-dark border rounded-3"
      style="
        box-shadow: rgba(240, 46, 170, 0.4) -5px 5px,
          rgba(240, 46, 170, 0.3) -10px 10px, rgba(240, 46, 170, 0.2) -15px 15px,
          rgba(240, 46, 170, 0.1) -20px 20px,
          rgba(240, 46, 170, 0.05) -25px 25px;
      "
    >
      <h2>Experiment 09 A</h2>
      <p>
        The code implements a recursive function to calculate the factorial of a number using the concept of repeated multiplication. It takes user input, performs the factorial calculation, and displays the result.
      </p>
      <form action="/" method="post">
        <button
          class="btn btn-outline-primary"
          value="experiment-09-a"
          name="button"
          type="submit"
        >
          Example button
        </button>
      </form>
    </div>
  </div>
  <div class="col-md-6 mb-4">
    <div
      class="h-100 p-5 text-bg-dark border rounded-3"
      style="
        box-shadow: rgba(240, 46, 170, 0.4) -5px 5px,
          rgba(240, 46, 170, 0.3) -10px 10px, rgba(240, 46, 170, 0.2) -15px 15px,
          rgba(240, 46, 170, 0.1) -20px 20px,
          rgba(240, 46, 170, 0.05) -25px 25px;
      "
    >
      <h2>Experiment 09 B</h2>
      <p>
        The code implements the Tower of Hanoi puzzle solution using a recursive algorithm. It takes the number of disks as input, recursively solves the subproblems to move the disks, and prints the sequence of moves required to solve the puzzle.
      </p>
      <form action="/" method="post">
        <button
          class="btn btn-outline-primary"
          value="experiment-09-b"
          name="button"
          type="submit"
        >
          Example button
        </button>
      </form>
    </div>
  </div>
</div>
<br />
<div class="row align-items-md-stretch">
  <div class="col-md-6 mb-4">
    <div
      class="h-100 p-5 text-bg-dark border rounded-3"
      style="
        box-shadow: rgba(240, 46, 170, 0.4) -5px 5px,
          rgba(240, 46, 170, 0.3) -10px 10px, rgba(240, 46, 170, 0.2) -15px 15px,
          rgba(240, 46, 170, 0.1) -20px 20px,
          rgba(240, 46, 170, 0.05) -25px 25px;
      "
    >
      <h2>Experiment 10 A</h2>
      <p>
        The code implements queue operations using a list in Python, allowing users to add elements, remove elements, and display the current contents of the queue interactively.
      </p>
      <form action="/" method="post">
        <button
          class="btn btn-outline-primary"
          value="experiment-10-a"
          name="button"
          type="submit"
        >
          Example button
        </button>
      </form>
    </div>
  </div>
  <div class="col-md-6 mb-4">
    <div
      class="h-100 p-5 text-bg-dark border rounded-3"
      style="
        box-shadow: rgba(240, 46, 170, 0.4) -5px 5px,
          rgba(240, 46, 170, 0.3) -10px 10px, rgba(240, 46, 170, 0.2) -15px 15px,
          rgba(240, 46, 170, 0.1) -20px 20px,
          rgba(240, 46, 170, 0.05) -25px 25px;
      "
    >
      <h2>Experiment 10 B</h2>
      <p>
        The code utilizes the PriorityQueue class from the queue module to implement a priority queue. Elements are added to the queue based on their priority and retrieved in the order of their priority.
      </p>
      <form action="/" method="post">
        <button
          class="btn btn-outline-primary"
          value="experiment-10-b"
          name="button"
          type="submit"
        >
          Example button
        </button>
      </form>
    </div>
  </div>
</div>
<br />
<br />
<div class="row align-items-md-stretch">
  <div class="col-md-6 mb-4">
    <div
      class="h-100 p-5 text-bg-dark border rounded-3"
      style="box-shadow: rgba(240, 46, 170, 0.4) 0px 5px 25px"
    >
      <h2>Experiment 11</h2>
      <p>
        The code illustrates the operations of insertion, deletion, and inorder traversal on a Binary Search Tree (BST) implemented using the Node class. The BST maintains the property that the left child of a node has a smaller value, and the right child has a larger value.
      </p>
      <form action="/" method="post">
        <button
          class="btn btn-outline-primary"
          value="experiment-11"
          name="button"
          type="submit"
        >
          Example button
        </button>
      </form>
    </div>
  </div>
</div>
<br />
<br />
<div class="row align-items-md-stretch">
  <div class="col-md-6 mb-4">
    <div
      class="h-100 p-5 text-bg-dark border rounded-3"
      style="
        box-shadow: rgba(240, 46, 170, 0.4) -5px 5px,
          rgba(240, 46, 170, 0.3) -10px 10px, rgba(240, 46, 170, 0.2) -15px 15px,
          rgba(240, 46, 170, 0.1) -20px 20px,
          rgba(240, 46, 170, 0.05) -25px 25px;
      "
    >
      <h2>Experiment 12 A</h2>
      <p>
        The code showcases the Breadth-First Search (BFS) algorithm for traversing a graph in breadth-first order, starting from a given root vertex. It uses a queue to keep track of the vertices to visit next and maintains a visited set to track the visited vertices during the traversal.
      </p>
      <form action="/" method="post">
        <button
          class="btn btn-outline-primary"
          value="experiment-12-a"
          name="button"
          type="submit"
        >
          Example button
        </button>
      </form>
    </div>
  </div>
  <div class="col-md-6 mb-4">
    <div
      class="h-100 p-5 text-bg-dark border rounded-3"
      style="
        box-shadow: rgba(240, 46, 170, 0.4) -5px 5px,
          rgba(240, 46, 170, 0.3) -10px 10px, rgba(240, 46, 170, 0.2) -15px 15px,
          rgba(240, 46, 170, 0.1) -20px 20px,
          rgba(240, 46, 170, 0.05) -25px 25px;
      "
    >
      <h2>Experiment 12 B</h2>
      <p>
        The code showcases the Depth-First Search (DFS) algorithm for traversing a graph in depth-first order, starting from a given starting vertex. It uses recursion to visit the neighbors of each vertex and maintains a visited set to track the visited vertices during the traversal.
      </p>
      <form action="/" method="post">
        <button
          class="btn btn-outline-primary"
          value="experiment-12-b"
          name="button"
          type="submit"
        >
          Example button
        </button>
      </form>
    </div>
  </div>
</div>
<br />
<br />
<div class="row align-items-md-stretch">
  <div class="col-md-6 mb-4">
    <div
      class="h-100 p-5 text-bg-dark border rounded-3"
      style="box-shadow: rgba(240, 46, 170, 0.4) 0px 5px 25px"
    >
      <h2>Experiment 13</h2>
      <p>
        The code demonstrates the usage of the hash() function on an instance of the Student class to generate a unique hash value, which can be used for indexing, uniqueness checks, and data integrity validation.
      </p>
      <form action="/" method="post">
        <button
          class="btn btn-outline-info"
          value="experiment-13"
          name="button"
          type="submit"
        >
          Example button
        </button>
      </form>
    </div>
  </div>
</div>
<br>
<br>
<br>
<h2>Contact Me üòä</h2>
<form action="mailto:tahasindoli@gmail.com" method="post" enctype="text/plain">
  <div class="form-group">
    <br>
    <input type="email" class="form-control" name="email" id="exampleInputEmail1" aria-describedby="emailHelp" placeholder="Enter email">
    <br>
    <textarea class="form-control" name="message" rows="5" placeholder="Enter your message"></textarea>
    <br>
    <button type="submit" class="btn btn-primary">Contact Me</button>
    <br>
    <br>
    <small id="emailHelp" class="form-text text-muted">You can ask me any query or buy me a cup of Coffee, I love Coffee ‚ù§Ô∏è.</small>
  </div>
</form>
<%- include("partials/footer") -%>